{"ast":null,"code":"//Full credit for the parser goes to:\n//  http://www.bennadel.com/blog/1504-Ask-Ben-Parsing-CSV-Strings-With-Javascript-Exec-Regular-Expression-Command.htm\nvar fs = require('fs'),\n    Csv = exports.Csv;\n\nexports.createParser = function (delimiter, quote, quote_escape) {\n  return new Csv(delimiter, quote, quote_escape);\n};\n\nexports.createWriter = function (delimiter, quote, quote_escape) {\n  delimiter = delimiter || ',';\n  quote = quote || '\"';\n  quote_escape = quote_escape || '\"';\n\n  function write(list) {\n    var csv = '',\n        i;\n    list.forEach(function (line) {\n      for (i = 0, l = line.length; i < l; i++) {\n        line[i] = line[i].replace(quote, quote_escape + quote);\n      }\n\n      csv += quote + line.join(quote + delimiter + quote) + quote + '\\r\\n';\n    });\n    return csv;\n  }\n\n  function writeFile(file, list, callback) {\n    fs.writeFile(file, write(list), callback);\n  }\n\n  return {\n    write: write,\n    writeFile: writeFile\n  };\n};\n\nCsv = function Csv(delimiter, quote, quote_escape) {\n  this.delimiter = delimiter || ',';\n  this.quote = quote || '\"';\n  this.quote_escape = quote_escape || '\"';\n};\n\nCsv.prototype.parseFile = function (path, fn) {\n  var self = this;\n  fs.readFile(path, function (err, data) {\n    if (err) throw err;\n    self.parse(data, fn);\n  });\n};\n\nCsv.prototype.parse = function (data, fn) {\n  try {\n    var d = this.delimiter,\n        e = this.quote_escape,\n        q = this.quote;\n    var pattern = new RegExp('(' + d + '|\\\\r?\\\\n|\\\\r|^)' + '(?:' + q + '([^' + q + ']*(?:' + e + q + '[^' + q + ']*)*)\"|' + '([^' + q + d + '\\\\r\\\\n]*))', 'gi');\n    var csv = [[]];\n    var matches = null,\n        strMatchedValue,\n        matchedDelimiter;\n    if (e == '\\\\') e = '\\\\\\\\';\n\n    while (matches = pattern.exec(data)) {\n      matchedDelimiter = matches[1];\n\n      if (matchedDelimiter.length && matchedDelimiter !== d) {\n        csv.push([]);\n      }\n\n      if (matches[2]) {\n        strMatchedValue = matches[2].replace(new RegExp(e + q, 'g'), q);\n      } else {\n        strMatchedValue = matches[3];\n      }\n\n      csv[csv.length - 1].push(strMatchedValue);\n    }\n\n    csv.pop();\n\n    if (fn) {\n      fn(null, csv);\n    } else {\n      return csv;\n    }\n  } catch (e) {\n    if (fn) {\n      fn(e, []);\n    } else {\n      throw e;\n    }\n  }\n};\n\nCsv.prototype.mapFile = function (path, fn) {\n  var self = this;\n  this.parseFile(path, function (err, data) {\n    self.map(data, fn);\n  });\n};\n\nCsv.prototype.map = function (csv, fn) {\n  try {\n    var columns = csv.shift(),\n        //Get column names from the first row\n    obj,\n        obj_pool = [],\n        i = row = 0,\n        col_count = columns.length;\n\n    for (row = 0, len = csv.length; row < len; row++) {\n      if (csv[row].length != col_count) {\n        throw Error('CSV column count mismatch on line ' + (row + 2));\n      }\n\n      obj = {};\n\n      for (i = 0; i < col_count; i++) {\n        obj[columns[i]] = csv[row][i];\n      }\n\n      obj_pool.push(obj);\n    }\n\n    fn(null, obj_pool);\n  } catch (e) {\n    fn(e, []);\n  }\n};","map":null,"metadata":{},"sourceType":"script"}