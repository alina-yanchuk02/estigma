{"ast":null,"code":"import _classCallCheck from \"/home/alina/Desktop/UA/MEI/Tese/c\\xF3digo/interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/alina/Desktop/UA/MEI/Tese/c\\xF3digo/interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/alina/Desktop/UA/MEI/Tese/c\\xF3digo/interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/alina/Desktop/UA/MEI/Tese/c\\xF3digo/interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/alina/Desktop/UA/MEI/Tese/c\\xF3digo/interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/alina/Desktop/UA/MEI/Tese/c\\xF3digo/interface/src/components/Graphs/DoughnutChart.js\";\nimport React from 'react';\nimport ReactEcharts from 'echarts-for-react';\n\nvar DoughnutChart = /*#__PURE__*/function (_React$Component) {\n  _inherits(DoughnutChart, _React$Component);\n\n  function DoughnutChart(props) {\n    var _this;\n\n    _classCallCheck(this, DoughnutChart);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(DoughnutChart).call(this, props));\n\n    _this.onChartClick = function () {\n      for (var _len = arguments.length, rest = new Array(_len), _key = 0; _key < _len; _key++) {\n        rest[_key] = arguments[_key];\n      }\n\n      console.log('App:onClickChart', rest);\n    };\n\n    _this.getOption = function () {\n      return {\n        tooltip: {\n          trigger: 'item'\n        },\n        legend: {\n          top: '5%',\n          left: 'center',\n          textStyle: {\n            fontSize: 16,\n            fontFamily: 'Verdana, Geneva, Tahoma, sans-serif'\n          }\n        },\n        series: [{\n          name: 'Total de artigos',\n          type: 'pie',\n          radius: ['40%', '70%'],\n          avoidLabelOverlap: false,\n          itemStyle: {\n            borderRadius: 10,\n            borderColor: '#fff',\n            borderWidth: 2\n          },\n          textStyle: {\n            fontSize: 16,\n            fontFamily: 'Verdana, Geneva, Tahoma, sans-serif'\n          },\n          label: {\n            show: false,\n            position: 'center'\n          },\n          emphasis: {\n            label: {\n              show: true,\n              fontSize: '40',\n              fontWeight: 'bold'\n            }\n          },\n          labelLine: {\n            show: false\n          },\n          data: [{\n            value: 548,\n            name: 'Estigmatizante'\n          }, {\n            value: 500,\n            name: 'Literal'\n          }]\n        }]\n      };\n    };\n\n    return _this;\n  }\n\n  _createClass(DoughnutChart, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.echartsInstance = this.echartsReactRef.getEchartsInstance();\n      this.zr = this.echartsInstance.getZr();\n      this.zr.on('click', this.onChartClick);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return /*#__PURE__*/React.createElement(ReactEcharts, {\n        option: this.getOption(),\n        style: {\n          height: \"600px\",\n          width: \"500px\",\n          marginLeft: \"50px\",\n          marginTop: \"80px\"\n        },\n        ref: function ref(e) {\n          _this2.echartsReactRef = e;\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 13\n        }\n      });\n    }\n  }]);\n\n  return DoughnutChart;\n}(React.Component);\n\nexport default DoughnutChart;","map":{"version":3,"sources":["/home/alina/Desktop/UA/MEI/Tese/cÃ³digo/interface/src/components/Graphs/DoughnutChart.js"],"names":["React","ReactEcharts","DoughnutChart","props","onChartClick","rest","console","log","getOption","tooltip","trigger","legend","top","left","textStyle","fontSize","fontFamily","series","name","type","radius","avoidLabelOverlap","itemStyle","borderRadius","borderColor","borderWidth","label","show","position","emphasis","fontWeight","labelLine","data","value","echartsInstance","echartsReactRef","getEchartsInstance","zr","getZr","on","height","width","marginLeft","marginTop","e","Component"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,YAAP,MAAyB,mBAAzB;;IAEMC,a;;;AAEJ,yBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,uFAAMA,KAAN;;AADiB,UAcnBC,YAdmB,GAcJ,YAAa;AAAA,wCAATC,IAAS;AAATA,QAAAA,IAAS;AAAA;;AAC1BC,MAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ,EAAgCF,IAAhC;AACH,KAhBoB;;AAAA,UAkBjBG,SAlBiB,GAkBL;AAAA,aAAO;AACfC,QAAAA,OAAO,EAAE;AACLC,UAAAA,OAAO,EAAE;AADJ,SADM;AAIbC,QAAAA,MAAM,EAAE;AACNC,UAAAA,GAAG,EAAE,IADC;AAENC,UAAAA,IAAI,EAAE,QAFA;AAGNC,UAAAA,SAAS,EAAE;AACTC,YAAAA,QAAQ,EAAE,EADD;AAETC,YAAAA,UAAU,EAAE;AAFH;AAHL,SAJK;AAYbC,QAAAA,MAAM,EAAE,CACN;AACEC,UAAAA,IAAI,EAAE,kBADR;AAEEC,UAAAA,IAAI,EAAE,KAFR;AAGEC,UAAAA,MAAM,EAAE,CAAC,KAAD,EAAQ,KAAR,CAHV;AAIEC,UAAAA,iBAAiB,EAAE,KAJrB;AAKEC,UAAAA,SAAS,EAAE;AACTC,YAAAA,YAAY,EAAE,EADL;AAETC,YAAAA,WAAW,EAAE,MAFJ;AAGTC,YAAAA,WAAW,EAAE;AAHJ,WALb;AAUEX,UAAAA,SAAS,EAAE;AACTC,YAAAA,QAAQ,EAAE,EADD;AAETC,YAAAA,UAAU,EAAE;AAFH,WAVb;AAcEU,UAAAA,KAAK,EAAE;AACLC,YAAAA,IAAI,EAAE,KADD;AAELC,YAAAA,QAAQ,EAAE;AAFL,WAdT;AAkBEC,UAAAA,QAAQ,EAAE;AACRH,YAAAA,KAAK,EAAE;AACLC,cAAAA,IAAI,EAAE,IADD;AAELZ,cAAAA,QAAQ,EAAE,IAFL;AAGLe,cAAAA,UAAU,EAAE;AAHP;AADC,WAlBZ;AAyBEC,UAAAA,SAAS,EAAE;AACTJ,YAAAA,IAAI,EAAE;AADG,WAzBb;AA4BEK,UAAAA,IAAI,EAAE,CACJ;AAAEC,YAAAA,KAAK,EAAE,GAAT;AAAcf,YAAAA,IAAI,EAAE;AAApB,WADI,EAEJ;AAAEe,YAAAA,KAAK,EAAE,GAAT;AAAcf,YAAAA,IAAI,EAAE;AAApB,WAFI;AA5BR,SADM;AAZK,OAAP;AAAA,KAlBK;;AAAA;AAGlB;;;;wCAImB;AAClB,WAAKgB,eAAL,GAAuB,KAAKC,eAAL,CAAqBC,kBAArB,EAAvB;AACA,WAAKC,EAAL,GAAU,KAAKH,eAAL,CAAqBI,KAArB,EAAV;AAEA,WAAKD,EAAL,CAAQE,EAAR,CAAW,OAAX,EAAoB,KAAKnC,YAAzB;AACD;;;6BAuDU;AAAA;;AACL,0BACI,oBAAC,YAAD;AACI,QAAA,MAAM,EAAE,KAAKI,SAAL,EADZ;AAEI,QAAA,KAAK,EAAE;AAAEgC,UAAAA,MAAM,EAAE,OAAV;AAAmBC,UAAAA,KAAK,EAAE,OAA1B;AAAmCC,UAAAA,UAAU,EAAC,MAA9C;AAAsDC,UAAAA,SAAS,EAAC;AAAhE,SAFX;AAGK,QAAA,GAAG,EAAE,aAACC,CAAD,EAAO;AACD,UAAA,MAAI,CAACT,eAAL,GAAuBS,CAAvB;AACH,SALb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ;AAQE;;;;EA9EkB5C,KAAK,CAAC6C,S;;AAiFlC,eAAe3C,aAAf","sourcesContent":["import React from 'react'\nimport ReactEcharts from 'echarts-for-react'\n\nclass DoughnutChart extends React.Component {\n\n  constructor(props) {\n    super(props);\n   \n  }\n\n  \n\n  componentDidMount() {\n    this.echartsInstance = this.echartsReactRef.getEchartsInstance();\n    this.zr = this.echartsInstance.getZr();\n\n    this.zr.on('click', this.onChartClick);\n  }\n\n  onChartClick = (...rest) => {\n    console.log('App:onClickChart', rest);\n};\n\n    getOption = () => ({\n        tooltip: {\n            trigger: 'item'\n          },\n          legend: {\n            top: '5%',\n            left: 'center',\n            textStyle: {\n              fontSize: 16,\n              fontFamily: 'Verdana, Geneva, Tahoma, sans-serif',\n            },\n          },\n          series: [\n            {\n              name: 'Total de artigos',\n              type: 'pie',\n              radius: ['40%', '70%'],\n              avoidLabelOverlap: false,\n              itemStyle: {\n                borderRadius: 10,\n                borderColor: '#fff',\n                borderWidth: 2\n              },\n              textStyle: {\n                fontSize: 16,\n                fontFamily: 'Verdana, Geneva, Tahoma, sans-serif',\n              },\n              label: {\n                show: false,\n                position: 'center'\n              },\n              emphasis: {\n                label: {\n                  show: true,\n                  fontSize: '40',\n                  fontWeight: 'bold'\n                }\n              },\n              labelLine: {\n                show: false\n              },\n              data: [\n                { value: 548, name: 'Estigmatizante' },\n                { value: 500, name: 'Literal' },\n              ]\n            }\n          ]\n    });\n\n    render() {\n        return (\n            <ReactEcharts\n                option={this.getOption()}\n                style={{ height: \"600px\", width: \"500px\", marginLeft:\"50px\", marginTop:\"80px\"}}\n                 ref={(e) => {\n                            this.echartsReactRef = e;\n                        }}\n            />\n        )};\n}\n\nexport default DoughnutChart"]},"metadata":{},"sourceType":"module"}