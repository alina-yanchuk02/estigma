{"ast":null,"code":"import _slicedToArray from \"/home/alina/Desktop/UA/MEI/Tese/c\\xF3digo/interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/alina/Desktop/UA/MEI/Tese/c\\xF3digo/interface/src/components/Graphs/PieChart.js\";\nimport React, { useState, useEffect } from 'react';\nimport ReactECharts from 'echarts-for-react';\n\nfunction PieChart() {\n  var _useState = useState(),\n      _useState2 = _slicedToArray(_useState, 2),\n      options = _useState2[0],\n      setOptions = _useState2[1];\n\n  var _useState3 = useState('2012'),\n      _useState4 = _slicedToArray(_useState3, 2),\n      dimension = _useState4[0],\n      setDimension = _useState4[1];\n\n  var updateAxisInfo = function updateAxisInfo(event) {\n    var xAxisInfo = event.axesInfo[0];\n\n    if (xAxisInfo) {\n      var _dimension = xAxisInfo.value + 1;\n\n      setOptions({\n        series: {\n          id: 'pie',\n          label: {\n            formatter: '{b}: {@[' + _dimension + ']} ({d}%)'\n          },\n          encode: {\n            value: _dimension,\n            tooltip: _dimension\n          }\n        }\n      });\n    }\n  };\n\n  var EventsDict = {\n    'updateAxisPointer': updateAxisInfo\n  };\n  useEffect(function () {\n    setTimeout(function () {\n      var option = {\n        legend: {},\n        tooltip: {\n          trigger: 'axis',\n          showContent: false\n        },\n        dataset: {\n          source: [['product', '2012', '2013', '2014', '2015', '2016', '2017'], ['Milk Tea', 56.5, 82.1, 88.7, 70.1, 53.4, 85.1], ['Matcha Latte', 51.1, 51.4, 55.1, 53.3, 73.8, 68.7], ['Cheese Cocoa', 40.1, 62.2, 69.5, 36.4, 45.2, 32.5], ['Walnut Brownie', 25.2, 37.1, 41.2, 18, 33.9, 49.1]]\n        },\n        xAxis: {\n          type: 'category'\n        },\n        yAxis: {\n          gridIndex: 0\n        },\n        grid: {\n          top: '55%'\n        },\n        series: [{\n          type: 'line',\n          smooth: true,\n          seriesLayoutBy: 'row',\n          emphasis: {\n            focus: 'series'\n          }\n        }, {\n          type: 'line',\n          smooth: true,\n          seriesLayoutBy: 'row',\n          emphasis: {\n            focus: 'series'\n          }\n        }, {\n          type: 'line',\n          smooth: true,\n          seriesLayoutBy: 'row',\n          emphasis: {\n            focus: 'series'\n          }\n        }, {\n          type: 'line',\n          smooth: true,\n          seriesLayoutBy: 'row',\n          emphasis: {\n            focus: 'series'\n          }\n        }, {\n          type: 'pie',\n          id: 'pie',\n          radius: '30%',\n          center: ['50%', '25%'],\n          emphasis: {\n            focus: 'self'\n          },\n          label: {\n            formatter: \"{b}: \".concat(dimension, \" ({d}%)\")\n          },\n          encode: {\n            itemName: 'product',\n            value: dimension,\n            tooltip: dimension\n          }\n        }]\n      };\n      setOptions(option);\n    });\n  }, [dimension]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      paddingTop: \"2%\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 5\n    }\n  }, options ? /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(ReactECharts, {\n    option: options,\n    onEvents: EventsDict,\n    style: {\n      height: 500,\n      width: 1000\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 21\n    }\n  })) : null);\n}\n\nexport default PieChart;","map":{"version":3,"sources":["/home/alina/Desktop/UA/MEI/Tese/cÃ³digo/interface/src/components/Graphs/PieChart.js"],"names":["React","useState","useEffect","ReactECharts","PieChart","options","setOptions","dimension","setDimension","updateAxisInfo","event","xAxisInfo","axesInfo","value","series","id","label","formatter","encode","tooltip","EventsDict","setTimeout","option","legend","trigger","showContent","dataset","source","xAxis","type","yAxis","gridIndex","grid","top","smooth","seriesLayoutBy","emphasis","focus","radius","center","itemName","paddingTop","height","width"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport ReactECharts from 'echarts-for-react'\n\nfunction PieChart() {\nconst [options, setOptions] = useState()\nconst [dimension, setDimension] = useState('2012')\n\nconst updateAxisInfo = (event) => {\n  const xAxisInfo = event.axesInfo[0];\n  if (xAxisInfo) {\n    const dimension = xAxisInfo.value + 1;\n    setOptions({\n      series: {\n        id: 'pie',\n        label: {\n          formatter: '{b}: {@[' + dimension + ']} ({d}%)'\n        },\n        encode: {\n          value: dimension,\n          tooltip: dimension\n        }\n      }\n    });\n  }\n}\n\nconst EventsDict = {\n    'updateAxisPointer': updateAxisInfo\n}\n\nuseEffect(() => {\n    setTimeout(function() {\n       \n        const option = {\n            legend: {},\n            tooltip: {\n                trigger: 'axis',\n                showContent: false\n            },\n            dataset: {\n                source: [\n                    ['product', '2012', '2013', '2014', '2015', '2016', '2017'],\n                    ['Milk Tea', 56.5, 82.1, 88.7, 70.1, 53.4, 85.1],\n                    ['Matcha Latte', 51.1, 51.4, 55.1, 53.3, 73.8, 68.7],\n                    ['Cheese Cocoa', 40.1, 62.2, 69.5, 36.4, 45.2, 32.5],\n                    ['Walnut Brownie', 25.2, 37.1, 41.2, 18, 33.9, 49.1]\n                ]\n            },\n            xAxis: { type: 'category' },\n            yAxis: { gridIndex: 0 },\n            grid: { top: '55%' },\n            series: [\n                {\n                    type: 'line',\n                    smooth: true,\n                    seriesLayoutBy: 'row',\n                    emphasis: { focus: 'series' }\n                },\n                {\n                    type: 'line',\n                    smooth: true,\n                    seriesLayoutBy: 'row',\n                    emphasis: { focus: 'series' }\n                },\n                {\n                    type: 'line',\n                    smooth: true,\n                    seriesLayoutBy: 'row',\n                    emphasis: { focus: 'series' }\n                },\n                {\n                    type: 'line',\n                    smooth: true,\n                    seriesLayoutBy: 'row',\n                    emphasis: { focus: 'series' }\n                },\n                {\n                    type: 'pie',\n                    id: 'pie',\n                    radius: '30%',\n                    center: ['50%', '25%'],\n                    emphasis: {\n                        focus: 'self'\n                    },\n                    label: {\n                        formatter: `{b}: ${dimension} ({d}%)`\n                    },\n                    encode: {\n                        itemName: 'product',\n                        value: dimension,\n                        tooltip: dimension\n                    }\n                }\n\n            ]\n\n        }\n        setOptions(option)\n\n    })\n}, [dimension])\n\nreturn (\n    <div style={{ paddingTop: \"2%\" }}>\n        {options ?\n                <div>\n                    <ReactECharts\n                        option={options}\n                        onEvents={EventsDict}\n                        style={{ height: 500, width: 1000 }}\n                    />\n                </div>\n            : null\n        }\n\n    </div>\n)\n}\n\nexport default PieChart\n"]},"metadata":{},"sourceType":"module"}